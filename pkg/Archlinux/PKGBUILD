# Maintainer: Jan Veen <jan.veen Ã¦t posteo.de>
pkgname=tiny-auth
pkgver=2.1.0
pkgrel=1
pkgdesc="OIDC Provider"
arch=('x86_64')
url="https://veenj.de/git/veenj/${pkgname}"
license=('GPL3')
depends=('gcc-libs' 'systemd' 'openssl')
makedepends=('rust' 'gcc' 'pkgconf' 'npm')
backup=("etc/${pkgname}/config.yml"
        "etc/${pkgname}/store/clients/tiny-auth-frontend.yml"
        "etc/${pkgname}/store/scopes/address.yml"
        "etc/${pkgname}/store/scopes/email.yml"
        "etc/${pkgname}/store/scopes/openid.yml"
        "etc/${pkgname}/store/scopes/phone.yml"
        "etc/${pkgname}/store/scopes/profile.yml")

versions_with_migrations=(2.1.0)

build() {
    cd "$srcdir"
    chmod u+rw . -R

    cd "$srcdir/src/sql"
    local db_name=build
    rm -f sqlite/build/$db_name.sqlite*
    ./gradlew :sqlite:update                                                   \
            -PdbName=$db_name                                                  \
            -PliquibaseLabels=$db_name
    cd "$srcdir/src/rust"
    DATABASE_URL=sqlite://$srcdir/src/sql/sqlite/build/$db_name.sqlite         \
            cargo build --release

    cd "$srcdir/src/typescript"
    npm install
    mkdir -p src/generated
    npx protoc \
            --ts_out src/generated \
            --ts_opt long_type_string,generate_dependencies,optimize_code_size \
            --proto_path ../proto \
            ../proto/tiny-auth/tiny-auth.proto
    npm run build

    cd "$srcdir/src/sql"
    local db_name=packaging
    rm -f sqlite/build/$db_name.sqlite*
    for v in "${versions_with_migrations[@]}" ; do
        ./gradlew :sqlite:updateSql                                            \
                -PdbName=$db_name                                              \
                -PliquibaseLabels=schema,$v                                    \
                -PliquibaseOutputFile=sqlite/build/schema-$v.sql
        ./gradlew :sqlite:update                                               \
                -PdbName=$db_name                                              \
                -PliquibaseLabels=schema,$v
        ./gradlew :sqlite:updateSql                                            \
                -PdbName=$db_name                                              \
                -PliquibaseLabels=reference,$v                                 \
                -PliquibaseOutputFile=sqlite/build/reference-$v.sql
        ./gradlew :sqlite:update                                               \
                -PdbName=$db_name                                              \
                -PliquibaseLabels=reference,$v
    done
}

check() {
    cd "$srcdir/src/rust"
    local db_name=build
    DATABASE_URL=sqlite://$srcdir/src/sql/sqlite/build/$db_name.sqlite         \
            cargo fmt --all -- --check
    DATABASE_URL=sqlite://$srcdir/src/sql/sqlite/build/$db_name.sqlite         \
            cargo clippy --all-targets
    cargo sqlx prepare --workspace --check

    cd "$srcdir/src/sql"
    local db_name=unittests
    rm -f sqlite/build/$db_name.sqlite*
    ./gradlew :sqlite:update                                                   \
            -PdbName=$db_name                                                  \
            -PliquibaseLabels=schema,reference,$(echo                          \
                    ${versions_with_migrations[*]} | sed 's/ /,/g')
    cd "$srcdir/src/rust"
    DATABASE_URL=sqlite://$srcdir/src/sql/sqlite/build/$db_name.sqlite         \
            cargo test -- --test-threads 1

    cd "$srcdir/src/typescript"
    npx prettier . --check
    npm run lint
    npm audit
}

package() {
    cd "$srcdir"

    cd src/rust
    install -D -m 755 target/release/${pkgname} $pkgdir/usr/bin/${pkgname}
    install -D -m 755 target/release/${pkgname}-password-encoder $pkgdir/usr/bin/${pkgname}-password-encoder
    install -D -m 755 target/release/${pkgname}-scope-debugger $pkgdir/usr/bin/${pkgname}-scope-debugger

    cd ../..
    install -D -m 644 pkg/config.yml $pkgdir/etc/${pkgname}/config.yml
    install -D -m 644 pkg/systemd.service $pkgdir/usr/lib/systemd/system/${pkgname}.service
    install -D -m 644 pkg/systemd.sysusers $pkgdir/usr/lib/sysusers.d/${pkgname}.conf
    install -D -m 644 pkg/systemd.tmpfiles $pkgdir/usr/lib/tmpfiles.d/${pkgname}.conf

    mkdir -p $pkgdir/usr/share/${pkgname}/static
    cp -r src/static/css $pkgdir/usr/share/${pkgname}/static
    cp -r src/static/img $pkgdir/usr/share/${pkgname}/static
    cp -r src/typescript/dist/assets $pkgdir/usr/share/${pkgname}/static
    cp -r src/static/templates $pkgdir/usr/share/${pkgname}/static
    rm $pkgdir/usr/share/${pkgname}/static/templates/index.html.j2
    cp -r src/typescript/dist/index.html $pkgdir/usr/share/${pkgname}/static/templates/index.html.j2

    mkdir -p $pkgdir/usr/share/${pkgname}/sql/sqlite
    cp src/sql/sqlite/build/schema-*.sql $pkgdir/usr/share/${pkgname}/sql/sqlite
    cp src/sql/sqlite/build/reference-*.sql $pkgdir/usr/share/${pkgname}/sql/sqlite

    mkdir -p $pkgdir/etc/${pkgname}/store/{users,clients,scopes}
    cp -r pkg/scopes/* $pkgdir/etc/${pkgname}/store/scopes
    cp -r pkg/clients/* $pkgdir/etc/${pkgname}/store/clients

    mkdir -p $pkgdir/usr/share/doc/${pkgname}
    cp -r doc/* $pkgdir/usr/share/doc/${pkgname}
    cp -r pkg/examples $pkgdir/usr/share/doc/${pkgname}
}
