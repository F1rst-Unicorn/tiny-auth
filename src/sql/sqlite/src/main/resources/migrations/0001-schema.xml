<?xml version="1.0" encoding="UTF-8"?>
<!--
    tiny-auth: Tiny OIDC Provider
    Copyright (C) 2019 The tiny-auth developers

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
-->
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="
            http://www.liquibase.org/xml/ns/dbchangelog https://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd"
        context="production">

    <changeSet id="1" author="admin" labels="schema">
        <sql endDelimiter=";;">
            create table tiny_auth_password (
                id integer primary key not null,
                algorithm text not null,
                check (algorithm in ('pbkdf2hmacsha256', 'ldap'))
            ) strict;;

            create table tiny_auth_user (
                id integer primary key not null,
                name text not null,
                password integer not null,
                foreign key (password) references tiny_auth_password(id)
                    on update cascade on delete restrict deferrable initially deferred
            ) strict;;

            create unique index tiny_auth_user_name on tiny_auth_user (name);;

            create table tiny_auth_user_allowed_scopes (
                id integer primary key not null,
                user integer not null,
                client integer not null,
                scope integer not null,
                foreign key ("user") references tiny_auth_user(id)
                    on update cascade on delete cascade deferrable initially deferred,
                foreign key (client) references tiny_auth_client(id)
                    on update cascade on delete cascade deferrable initially deferred,
                foreign key (scope) references tiny_auth_scope(id)
                    on update cascade on delete cascade deferrable initially deferred
            ) strict;;

            create unique index tiny_auth_user_allowed_scopes_user on tiny_auth_user_allowed_scopes (user, client, scope);;

            create table tiny_auth_password_pbkdf2hmacsha256 (
                id integer primary key not null,
                password integer not null,
                credential blob not null,
                iterations integer not null,
                salt blob not null,
                foreign key (password) references tiny_auth_password(id)
                    on update cascade on delete cascade deferrable initially deferred,
                check (0 &lt; iterations and iterations &lt;= 4294967295)
            ) strict;;

            create unique index tiny_auth_password_pbkdf2hmacsha256_password on tiny_auth_password_pbkdf2hmacsha256 (password);;

            create table tiny_auth_password_ldap (
                id integer primary key not null,
                password integer not null,
                store_name text not null,
                foreign key (password) references tiny_auth_password(id)
                    on update cascade on delete cascade deferrable initially deferred
            ) strict;;

            create unique index tiny_auth_password_ldap_password on tiny_auth_password_ldap (password);;

            create table tiny_auth_client (
                id integer primary key not null,
                client_id text not null,
                client_type text not null,
                password integer null,
                public_key text null,
                foreign key (password) references tiny_auth_password(id)
                    on update cascade on delete restrict deferrable initially deferred,
                check (client_type in ('public', 'confidential')),
                check (client_type != 'confidential' or password is not null)
            ) strict;;

            create unique index tiny_auth_client_client_id on tiny_auth_client (client_id);;

            create table tiny_auth_redirect_uri (
                id integer primary key not null,
                redirect_uri text not null,
                client integer not null,
                foreign key (client) references tiny_auth_client(id)
                    on update cascade on delete cascade deferrable initially deferred
            ) strict;;

            create index tiny_auth_redirect_uri_client on tiny_auth_redirect_uri (client);;

            create table tiny_auth_client_allowed_scopes (
                id integer primary key not null,
                client integer not null,
                scope integer not null,
                foreign key (scope) references tiny_auth_scope(id)
                    on update cascade on delete cascade deferrable initially deferred
            ) strict;;

            create index tiny_auth_client_allowed_scopes_client on tiny_auth_client_allowed_scopes (client);;

            create table tiny_auth_scope (
                id integer primary key not null,
                name text not null,
                pretty_name text not null,
                description text not null
            ) strict;;

            create table tiny_auth_scope_mapping (
                id integer primary key not null,
                scope integer not null,
                mapping_id integer not null,
                type text not null,
                optional integer not null default 0,
                destination_userinfo integer not null default 0,
                destination_access_token integer not null default 0,
                destination_id_token integer not null default 0,
                foreign key (scope) references tiny_auth_scope(id)
                    on update cascade on delete cascade deferrable initially deferred,
                check (type in ('plain', 'template', 'user_attribute', 'client_attribute')),
                check (optional in (0, 1)),
                check (destination_userinfo in (0, 1)),
                check (destination_access_token in (0, 1)),
                check (destination_id_token in (0, 1))
            ) strict;;

            create index tiny_auth_scope_mapping_scope on tiny_auth_scope_mapping (scope);;
            create index tiny_auth_scope_mapping_mapping_id on tiny_auth_scope_mapping (mapping_id);;

            create table tiny_auth_scope_mapping_plain (
                id integer primary key not null,
                structure text not null,
                type text not null,
                value text not null,
                check (type in ('boolean', 'number', 'string', 'null'))
            ) strict;;

            create table tiny_auth_scope_mapping_template (
                id integer primary key not null,
                structure text not null,
                template text not null
            ) strict;;

            create table tiny_auth_scope_mapping_user_attribute (
                id integer primary key not null,
                structure text not null,
                user_attribute text not null
            ) strict;;

            create table tiny_auth_scope_mapping_client_attribute (
                id integer primary key not null,
                structure text not null,
                client_attribute text not null
            ) strict;;

            create table tiny_auth_authorization_code (
                id integer primary key not null,
                client integer not null,
                user integer not null,
                redirect_uri integer not null,
                scope text not null,
                code text not null,
                insertion_time text not null,
                authentication_time text not null,
                nonce text null,
                pkce_challenge text null,
                pkce_challenge_method text null,
                foreign key (client) references tiny_auth_client(id)
                    on update cascade on delete cascade deferrable initially deferred,
                foreign key ("user") references tiny_auth_user(id)
                    on update cascade on delete cascade deferrable initially deferred,
                foreign key (redirect_uri) references tiny_auth_redirect_uri(id)
                    on update cascade on delete restrict deferrable initially deferred,
                check (pkce_challenge_method in ('plain', 'S256'))
            );;

            create unique index tiny_auth_authorization_code_code on tiny_auth_authorization_code (code, client);;
        </sql>
        <rollback>
            <sql endDelimiter=";;">
                drop table tiny_auth_user;;
                drop table tiny_auth_user_allowed_scopes;;
                drop table tiny_auth_password;;
                drop table tiny_auth_password_pbkdf2hmacsha256;;
                drop table tiny_auth_client;;
                drop table tiny_auth_redirect_uri;;
                drop table tiny_auth_client_allowed_scopes;;
                drop table tiny_auth_scope;;
                drop table tiny_auth_scope_mapping;;
                drop table tiny_auth_scope_mapping_plain;;
                drop table tiny_auth_scope_mapping_template;;
                drop table tiny_auth_scope_mapping_user_attribute;;
                drop table tiny_auth_scope_mapping_client_attribute;;
                drop table tiny_auth_authorization_code;;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="2" author="admin" labels="reference">
        <sql endDelimiter=";;">
            alter table tiny_auth_user add column email text not null default '';;
            alter table tiny_auth_user add column email_verified integer not null default 0 check (email_verified in (0, 1));;
            alter table tiny_auth_user add column phone_number text not null default '';;
            alter table tiny_auth_user add column phone_number_verified integer not null default 0 check (phone_number_verified in (0, 1));;
            alter table tiny_auth_user add column address text not null default '';;
            alter table tiny_auth_user add column given_name text not null default '';;
            alter table tiny_auth_user add column middle_name text not null default '';;
            alter table tiny_auth_user add column family_name text not null default '';;
            alter table tiny_auth_user add column nickname text not null default '';;
            alter table tiny_auth_user add column preferred_username text not null default '';;
            alter table tiny_auth_user add column profile text not null default '';;
            alter table tiny_auth_user add column picture blob not null default (unhex(''));;
            alter table tiny_auth_user add column website text not null default '';;
            alter table tiny_auth_user add column gender text not null default '';;
            alter table tiny_auth_user add column birthday real not null default 0;;
            alter table tiny_auth_user add column zoneinfo text not null default '';;
            alter table tiny_auth_user add column locale text not null default '';;
            alter table tiny_auth_user add column updated_at real not null default (unixepoch('subsec'));;

            insert into tiny_auth_scope (name, pretty_name, description)
            values ('openid', 'Authentication', 'Your username');;

            insert into tiny_auth_scope (name, pretty_name, description)
            values ('email', 'Email Address', 'Access to your email address');;

            insert into tiny_auth_scope_mapping_template (structure, template)
            values ('/email', '{{ user.email }}');;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'template',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'email';;

            insert into tiny_auth_scope_mapping_plain (structure, type, "value")
            select
                '/email_verified',
                'boolean',
                'true';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'plain',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'email';;

            insert into tiny_auth_scope (name, pretty_name, description)
            values ('address', 'Address', 'Access to your address');;

            insert into tiny_auth_scope_mapping_user_attribute (structure, user_attribute)
            select
                '/',
                '/address';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'user_attribute',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'address';;

            insert into tiny_auth_scope (name, pretty_name, description)
            values ('phone', 'Phone Number', 'Access to your phone number');;

            insert into tiny_auth_scope_mapping_template (structure, template)
            select
                '/phone_number',
                '{{ user.phone_number }}';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'template',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'phone';;

            insert into tiny_auth_scope_mapping_plain (structure, type, "value")
            select
                '/phone_number_verified',
                'boolean',
                'true';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'plain',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'phone';;

            insert into tiny_auth_scope (name, pretty_name, description)
            values ('profile', 'Profile Information', 'Access to your name, birthdate, gender and position');;

            insert into tiny_auth_scope_mapping_template (structure, template)
            select
                '/name',
                '{{ user.given_name }}{% if user.middle_name is defined %} {{ user.middle_name }} {% else %} {% endif %}{{ user.family_name }}';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'template',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'profile';;

            insert into tiny_auth_scope_mapping_template (structure, template)
            select
                '/family_name',
                '{{ user.family_name }}';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'template',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'profile';;

            insert into tiny_auth_scope_mapping_template (structure, template)
            select
                '/given_name',
                '{{ user.given_name }}';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'template',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'profile';;

            insert into tiny_auth_scope_mapping_template (structure, template)
            select
                '/middle_name',
                '{{ user.middle_name | default(value='''') }}';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'template',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'profile';;

            insert into tiny_auth_scope_mapping_template (structure, template)
            select
                '/nickname',
                '{{ user.nickname | default(value=user.given_name) }}';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'template',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'profile';;

            insert into tiny_auth_scope_mapping_template (structure, template)
            select
                '/preferred_username',
                '{{ user.preferred_username }}';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'template',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'profile';;

            insert into tiny_auth_scope_mapping_template (structure, template)
            select
                '/profile',
                '{{ user.profile | default(value='''') }}';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'template',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'profile';;

            insert into tiny_auth_scope_mapping_template (structure, template)
            select
                '/picture',
                '{{ user.picture | default(value='''') }}';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'template',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'profile';;

            insert into tiny_auth_scope_mapping_template (structure, template)
            select
                '/website',
                '{{ user.website | default(value='''') }}';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'template',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'profile';;

            insert into tiny_auth_scope_mapping_template (structure, template)
            select
                '/gender',
                '{{ user.gender }}';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'template',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'profile';;

            insert into tiny_auth_scope_mapping_template (structure, template)
            select
                '/birthdate',
                '{{ user.birthdate }}';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'template',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'profile';;

            insert into tiny_auth_scope_mapping_template (structure, template)
            select
                '/zoneinfo',
                '{{ user.zoneinfo }}';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'template',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'profile';;

            insert into tiny_auth_scope_mapping_template (structure, template)
            select
                '/locale',
                '{{ user.locale }}';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'template',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'profile';;

            insert into tiny_auth_scope_mapping_user_attribute (structure, user_attribute)
            select
                '/',
                '/updated_at';;

            insert into tiny_auth_scope_mapping (scope, type, mapping_id, optional, destination_userinfo, destination_id_token)
            select
                id,
                'user_attribute',
                last_insert_rowid(),
                1,
                1,
                1
            from tiny_auth_scope
            where name = 'profile';;
        </sql>
        <rollback>
            <sql endDelimiter=";;">
                delete
                from tiny_auth_scope_mapping_plain
                where id in (
                    select
                        mapping_id
                    from tiny_auth_scope_mapping
                    where scope in (
                        select
                            id
                        from tiny_auth_scope
                        where name in ('openid', 'address', 'profile', 'email', 'phone')));;

                delete
                from tiny_auth_scope_mapping_template
                where id in (
                    select
                        mapping_id
                    from tiny_auth_scope_mapping
                    where scope in (
                        select
                            id
                        from tiny_auth_scope
                        where name in ('openid', 'address', 'profile', 'email', 'phone')));;

                delete
                from tiny_auth_scope_mapping_user_attribute
                where id in (
                    select
                        mapping_id
                    from tiny_auth_scope_mapping
                    where scope in (
                        select
                            id
                        from tiny_auth_scope
                        where name in ('openid', 'address', 'profile', 'email', 'phone')));;

                delete
                from tiny_auth_scope_mapping_client_attribute
                where id in (
                    select
                        mapping_id
                    from tiny_auth_scope_mapping
                    where scope in (
                        select
                            id
                        from tiny_auth_scope
                        where name in ('openid', 'address', 'profile', 'email', 'phone')));;

                delete
                from tiny_auth_scope_mapping
                where scope in (
                    select
                        id
                    from tiny_auth_scope
                    where name in ('openid', 'address', 'profile', 'email', 'phone'));;

                delete
                from tiny_auth_scope
                where name in ('openid', 'address', 'profile', 'email', 'phone');;

                alter table tiny_auth_user drop column email;;
                alter table tiny_auth_user drop column email_verified;;
                alter table tiny_auth_user drop column phone_number;;
                alter table tiny_auth_user drop column phone_number_verified;;
                alter table tiny_auth_user drop column address;;
                alter table tiny_auth_user drop column given_name;;
                alter table tiny_auth_user drop column middle_name;;
                alter table tiny_auth_user drop column family_name;;
                alter table tiny_auth_user drop column nickname;;
                alter table tiny_auth_user drop column preferred_username;;
                alter table tiny_auth_user drop column profile;;
                alter table tiny_auth_user drop column picture;;
                alter table tiny_auth_user drop column website;;
                alter table tiny_auth_user drop column gender;;
                alter table tiny_auth_user drop column birthday;;
                alter table tiny_auth_user drop column zoneinfo;;
                alter table tiny_auth_user drop column locale;;
                alter table tiny_auth_user drop column updated_at;;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="3" author="admin" labels="reference">
        <sql endDelimiter=";;">
            insert into tiny_auth_client (client_id, client_type)
            values ('tiny-auth-frontend', 'public');;

            insert into tiny_auth_redirect_uri (redirect_uri, client)
            select
                'http://localhost:8088/oidc-login-redirect',
                id
            from tiny_auth_client
            where client_id = 'tiny-auth-frontend';;

            insert into tiny_auth_redirect_uri (redirect_uri, client)
            select
                'http://localhost:8088/oidc-login-redirect-silent',
                id
            from tiny_auth_client
            where client_id = 'tiny-auth-frontend';;

            insert into tiny_auth_client_allowed_scopes (client, scope)
            select *
            from (
                     select
                         id
                     from tiny_auth_client
                     where client_id = 'tiny-auth-frontend'),
                 (
                     select id from tiny_auth_scope where name in ('openid', 'address', 'profile', 'email', 'phone'));;
        </sql>
        <rollback>
            <sql endDelimiter=";;">
                delete
                from tiny_auth_redirect_uri
                where client = (
                    select
                        id
                    from tiny_auth_client
                    where client_id = 'tiny-auth-frontend');;

                delete
                from tiny_auth_client
                where client_id = 'tiny-auth-frontend';;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="4" author="admin" labels="testdata">
        <sql endDelimiter=";;">
            insert into tiny_auth_password (algorithm)
            values ('pbkdf2hmacsha256');;

            insert into tiny_auth_password_pbkdf2hmacsha256 (
                password,
                credential,
                iterations,
                salt
            ) values (
                last_insert_rowid(),
                unhex('bda453832ebf0a31c8081589bc3d01b7f3dbf95f0d9f33246811f4d2915efea5'),
                100000,
                unhex('b594b6e366ae6864100e0ff279f8455a9861753a8c99673260220371147daaf46a6f686e')
            );;

            insert into tiny_auth_user (
                name,
                password,
                email,
                email_verified,
                phone_number,
                phone_number_verified)
            select
                'john',
                last_insert_rowid(),
                'john@test.example',
                1,
                '+123456789',
                1;;

            insert into tiny_auth_password (algorithm)
            values ('pbkdf2hmacsha256');;

            insert into tiny_auth_password_pbkdf2hmacsha256 (
                password,
                credential,
                iterations,
                salt
            ) values (
                last_insert_rowid(),
                unhex('bda453832ebf0a31c8081589bc3d01b7f3dbf95f0d9f33246811f4d2915efea5'),
                100000,
                unhex('b594b6e366ae6864100e0ff279f8455a9861753a8c99673260220371147daaf46a6f686e')
            );;

            insert into tiny_auth_user (
                name,
                password,
                email,
                email_verified,
                phone_number,
                phone_number_verified)
            select
                'documentation_example',
                last_insert_rowid(),
                'john@test.example',
                1,
                '+123456789',
                1;;

            insert into tiny_auth_user_allowed_scopes (user, client, scope)
            select
                tiny_auth_user.id,
                tiny_auth_client.id,
                tiny_auth_scope.id
            from tiny_auth_user, tiny_auth_client, tiny_auth_scope
            where tiny_auth_user.name = 'john'
            and tiny_auth_client.client_id = 'tiny-auth-frontend'
            and tiny_auth_scope.name in ('openid', 'profile');;

            create table test_data_desk (
                id integer primary key not null,
                material text not null,
                assigned_to int,
                foreign key (assigned_to) references tiny_auth_user(id)
                    on update cascade on delete cascade deferrable initially deferred
            ) strict;;
            insert into test_data_desk (material, assigned_to)
            select 'steel', id
            from tiny_auth_user;;

            create table test_data_building (
                id integer primary key not null,
                street text not null
            ) strict;;
            insert into test_data_building (street)
            values ('Lincoln Street');;

            alter table tiny_auth_user add column sits_in int not null
                default 1
                references test_data_building (id)
                on update cascade on delete cascade deferrable initially deferred;;

            create table test_data_pet (
                id integer primary key not null,
                type text not null
            ) strict;;
            insert into test_data_pet (type)
            values ('cat'), ('dog');;
            create table test_data_pet_likes_user (
                id integer primary key not null,
                user int not null,
                pet int not null,
                foreign key (user) references tiny_auth_user(id)
                    on update cascade on delete cascade deferrable initially deferred,
                foreign key (pet) references test_data_pet(id)
                    on update cascade on delete cascade deferrable initially deferred
            ) strict;;
            insert into test_data_pet_likes_user (user, pet)
            select u.id, p.id
            from tiny_auth_user u, test_data_pet p;;

            create table test_data_meeting_room (
                id integer primary key not null,
                kind text not null,
                contained_in int not null,
                foreign key (contained_in) references test_data_building(id)
                    on update cascade on delete cascade deferrable initially deferred
            ) strict;;
            insert into test_data_meeting_room (kind, contained_in)
            select 'small', id
            from test_data_building;;
            insert into test_data_meeting_room (kind, contained_in)
            select 'large', id
            from test_data_building;;
        </sql>
        <rollback>
            <sql endDelimiter=";;">
                drop table test_data_desk;;
                drop table test_data_building;;
                drop table test_data_pet;;
                drop table test_data_pet_likes_user;;
                drop table test_data_meeting_room;;

                delete from tiny_auth_password_pbkdf2hmacsha256
                where password = (
                    select password
                    from tiny_auth_user
                    where name = 'john'
                );;

                delete from tiny_auth_password
                where id = (
                    select password
                    from tiny_auth_user
                    where name = 'john'
                );;

                delete from tiny_auth_user_allowed_scopes
                where user = (
                    select id
                    from tiny_auth_user
                    where name = 'john'
                );;

                delete from tiny_auth_user
                where name = 'john';;
            </sql>
        </rollback>
    </changeSet>
</databaseChangeLog>
